<% @title = "Manage Extensions" %>
<% content_for :stylesheets do %>
<style>
    .autocomplete .ac-dropdown .ac-hover {
        background: #eee;
    }
</style>
<% end %>
<% content_for :javascripts do %>
  <%= render partial: "components/autocomplete", locals: { hiddenCUDField: "#extension_course_user_datum_id" } %>
  <%= javascript_include_tag "materialize-autocomplete" %>
  <script type="application/javascript">
    jQuery(function() {
      /* set up dates */
      const $dueDate = moment("<%= @assessment.due_at.to_s %>", "YYYY-MM-DD hh:mm:ss ZZ").startOf('day');

      const $extensionDaysField = $('#extension_days');
      const $extensionNewDayField = $('#extension_due_at');
      const $extensionDaysLabel = $('label[for="extension_days"]');

      /* set up flatpickr (not using initialize_datetimepickers script since
      * it seems to be causing trouble with setting minDate). */
      const $extensionNewDayFlatpickr = flatpickr($extensionNewDayField, {
          altInput: true,
          defaultDate: $dueDate.valueOf(),
          minDate: $dueDate.valueOf()
      });

      /* Enable/disable extension days options */
      const $enableInfiniteExtension = $('#extension_infinite');
      function checkInfiniteExtension() {
        if ($enableInfiniteExtension.is(':checked')) {
          $extensionDaysField.prop('disabled',true);
          $extensionNewDayField.prop('disabled',true);
        } else {
          $extensionDaysField.prop('disabled',false);
          $extensionNewDayField.prop('disabled',false);
        }
      }

      $enableInfiniteExtension.click(checkInfiniteExtension);

      /* two-way-bind newDayField with daysField */
      $extensionDaysField.on('change', function() {
        const $newDate = moment($dueDate);
        $newDate.add($extensionDaysField.val(), 'days').startOf('day');
        $extensionNewDayFlatpickr.setDate($newDate.toDate());
      });
      $extensionNewDayField.on('change', function() {
        const $newDate = moment($extensionNewDayField.val()).startOf('day');
        const $extendBy = $newDate.diff($dueDate, 'days');
        $extensionDaysField.val($extendBy);
        $extensionDaysLabel.addClass("active");
      });

      /* Automatically display details of existing extensions */
      const $studentAutocompleteField = $('#student_autocomplete');
      const $studentAutocompleteLabel = $('label[for=\'student_autocomplete\']');
      const $hiddenCUDField = $('#extension_course_user_datum_id');
      const $updateWarning = $('#update-warning');
      const $studentSelect = $('.student-select');
      /* Map CUD to days / infinite details */
      const CUDToExtensionsMap = {
        <% @extensions.each do |ext| %>
          "<%= ext.course_user_datum_id %>": {
            days: "<%= ext.days %>",
            infinite: <%= ext.infinite %>
          },
        <% end %>
      };
      const CUDToFullNameMap = {
        <% @users.each do |k,v| %>
          "<%= v %>": "<%= j k %>",
        <% end %>
      };

      $hiddenCUDField.on('change', function() {
        const cud = $hiddenCUDField.val();
        if (cud === '' && $studentAutocompleteField.val() !== '') {
          // Don't update, cud is just temporarily blank while the option is being selected
          return;
        }

        const extensionExists = cud in CUDToExtensionsMap;

        let extensionDays = '0';
        let infiniteExtension = false;
        if (extensionExists) {
          const extensionData = CUDToExtensionsMap[cud];
          extensionDays = extensionData.days || '0';
          infiniteExtension = extensionData.infinite;
        }
        /* Populate fields */
        $extensionDaysField.val(extensionDays);
        $enableInfiniteExtension.prop('checked', infiniteExtension);
        $updateWarning.toggle(extensionExists);
        // To update calendar picker
        $extensionDaysField.trigger('change');
        // To disable extension days field as necessary
        checkInfiniteExtension();
      });

      // https://stackoverflow.com/questions/69317948/how-to-use-selectoption-in-autocomplete
      function selectStudent(e) {
        const $student = $(e.target);
        const cud = $student.data('cud');
        const fullName = CUDToFullNameMap[cud];
        $studentAutocompleteField.val(fullName);
        // To prevent overlap
        $studentAutocompleteLabel.addClass('active');
        // To trigger CUD change, etc.
        $studentAutocompleteField.trigger('change');
      }

      $studentSelect.click((e) => selectStudent(e));

      /* Initialization */
      checkInfiniteExtension();
      $updateWarning.hide();
    });
  </script>
  <script>
    const multiSelectData = [
      <% @users.each do |k,v| %>
      {
        'id': "<%= v %>",
        'text': "<%= j k %>"
      },
      <% end %>
    ];

    // https://github.com/icefox0801/materialize-autocomplete/issues/52#issuecomment-432699742
    var resizeDropdown = function (id_ele) {
      var elem = document.getElementById(id_ele);
      var instance = M.Dropdown.getInstance(elem);
      if (instance) {
        if (!instance.isOpen) instance.open();
        instance.recalculateDimensions();
      }
    }

    $(function () {
      $('#multipleInput').materialize_autocomplete({
        cacheable: false, // Force getData to run every time, to resize dropdown correctly
        multiple: {
          enable: true,
          maxSize: 999,
        },
        appender: {
          el: '#ac-users'
        },
        dropdown: {
          el: '#multipleDropdown'
        },
        hidden: {
          enable: true,
          el: '#course_user_data'
        },
        getData: function(value, callback) {
          const data = multiSelectData.filter(function (e) {
            return e.text.toLowerCase().indexOf(value.toLowerCase()) >= 0;
          });
          callback(value, data);
          resizeDropdown("multipleInput");
        }
      });
    });
  </script>
<% end %>

<div class="row">
  <div class="col s12 m6">
    <h4>Current Extensions (<%= @extensions.size %>)</h4>
    <table class="verticalTable">
      <thead>
        <tr>
          <th>Email</th>
          <th>Length</th>
          <th colspan=2>New Due Date</th>
        </tr>
      </thead>

      <tbody>
        <% if @extensions.empty? %>
          <tr>
            <td colspan=3>There are currently no extensions for this assessment</td>
          </tr>
        <% else %>
          <% @extensions.each do |ext| %>
            <tr>
              <td><a class="clickable student-select" data-cud=<%= ext.course_user_datum_id %>><%= ext.course_user_datum.email %></a></td>
              <td style="padding: 0 5px"><%= ext.infinite? ? "Infinite" : "#{pluralize(ext.days, "day")}" %></td>
              <td style="padding: 0 5px"><%= ext.infinite? ? "-" : "#{(@assessment.due_at + ext.days.days).strftime('%m-%d-%Y')}" %></td>
              <td><%= link_to '<i class="material-icons">delete</i>'.html_safe, [@course, @assessment, ext],
                              data: { confirm: 'Are you sure you want to delete the extension for user ' + ext.course_user_datum.email + '?' },
                              method: :delete %></td>
            </tr>
          <% end %>
        <% end %>
      </tbody>
    </table>
    <% if !@extensions.empty? %>
      <p>Click on an email above to update the extension.</p>
    <% end %>
  </div>

  <div class="col s12 m6">
    <h4>Create Extension</h4>
    <%= form_for @new_extension, :as=>"extension", :url=>{:action=>"create"}, builder: FormBuilderWithDateTimeInput do |f| %>
      <div class="input-field">
        <div class="autocomplete">
          <div id="ac-users"></div>
          <input type="text" id="multipleInput" placeholder="Start typing student names or emails" data-target="multipleDropdown" data-beloworigin="true" autocomplete="off">
          <p>Note: Existing extensions will be updated.</p>
          <ul id="multipleDropdown" class="ac-dropdown dropdown-content"></ul>
        </div>
      </div>
      <h6>Select a new due date</h6>
      <p>Currently due at: <span class="moment-date-time"><%= @assessment.due_at.to_s %></p>
      <%= f.date_select :due_at, greater_than: @assessment.due_at, id: "extension_due_at" %>
      <p>-OR- Specify number of days to extend:</p>
      <%= f.number_field :days, :size=>3, :placeholder=>0, :value=>0, :min=>0, :id=>"extension_days" %>
      <p>-OR- Infinite Extension?</p>
      <%= f.check_box :infinite, id: "extension_infinite" %>
      <%= hidden_field_tag :course_user_data, nil, autocomplete: "off" %>
      <%= f.hidden_field :course_user_datum_id, autocomplete: "off" %>
      <%= f.hidden_field :assessment_id%>
      <p id="update-warning" class="red-text">This student has a current extension. Submitting will update it!</p>
      <%= f.submit "Create" , {:class=>"btn primary"} %>
    <% end %>
  </div>
</div>
